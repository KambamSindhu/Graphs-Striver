// User function Template for Java

class Solution {

    List<Integer> eventualSafeNodes(int V, List<List<Integer>> adj) {

       List<List<Integer>> revadj =new ArrayList<>();
       int indegree[]=new int[V];
       Queue<Integer> q=new ArrayDeque<>();
       ArrayList<Integer> ans=new ArrayList<>();
       int safe[]=new int[V];
       for(int i=0;i<V;i++)
       {
           revadj.add(new ArrayList<>());
       }
       for(int i=0;i<V;i++)
       {
           for(int it:adj.get(i))
           {
               revadj.get(it).add(i);
               indegree[i]++;
           }
       }
       for(int i=0;i<V;i++)
       {
           if(indegree[i]==0)
           {
               q.add(i);
           }
       }
    while(!q.isEmpty())
    {
        int rem=q.remove();
        safe[rem]=1; // to store answer in sorted instead of sorting later
        for(int it:revadj.get(rem))
        {
            indegree[it]--;
            if(indegree[it]==0)
            {
                q.add(it);
            }
        }
    }
    for(int i=0;i<V;i++)
    {
        if(safe[i]==1)
        ans.add(i);
    }
   
    return ans;
    }
}
