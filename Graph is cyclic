class Solution {
    public boolean isCyclic(int V, int[][] edges) {
      
      ArrayList<ArrayList<Integer>> adj=new ArrayList<>();
      
      for(int i=0;i<V;i++)
      {
          adj.add(new ArrayList<Integer>());
      }
      int n=edges.length;
      
      
      for(int i=0;i<n;i++)
      {
          int u=edges[i][0];
          int v=edges[i][1];
          adj.get(u).add(v);
     
      }
      int vis[]=new int[V];
      int pathVis[]=new int[V];
      
      for(int i=0;i<V;i++)
      {
          if(vis[i]==0)
          {
              if(dfs(i,vis,pathVis,adj))
              {
                  return true;
              }
          }
      }
      return false;
      
    }
    public boolean dfs(int i,int vis[],int pathVis[],
    ArrayList<ArrayList<Integer>> adj)
    {
        vis[i]=1;
        pathVis[i]=1;
        
        for(int it:adj.get(i))
        {
            if(vis[it]==0  )
            {
                if(dfs(it,vis,pathVis,adj))
                {
                    return true;
                }
                
            }
            else  if( pathVis[it]==1)
            {
                return true;
            }
        }
         pathVis[i]=0;
          return false;
    }
    
    
    
    
    
    
    
    
}
