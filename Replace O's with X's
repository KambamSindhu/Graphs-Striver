// User function Template for Java
class Solution {
    static char[][] fill(char mat[][]) {
        int n = mat.length;
        int m = mat[0].length;
        boolean vis[][] = new boolean[n][m];

        int delrow[] = {-1, 0, 1, 0};
        int delcol[] = {0, 1, 0, -1};

        // First row & last row
        for (int j = 0; j < m; j++) {
            if (!vis[0][j] && mat[0][j] == 'O') {
                dfs(0, j, vis, mat, delrow, delcol);
            }
            if (!vis[n - 1][j] && mat[n - 1][j] == 'O') {
                dfs(n - 1, j, vis, mat, delrow, delcol);
            }
        }

        // First col & last col
        for (int i = 0; i < n; i++) {
            if (!vis[i][0] && mat[i][0] == 'O') {
                dfs(i, 0, vis, mat, delrow, delcol);
            }
            if (!vis[i][m - 1] && mat[i][m - 1] == 'O') {
                dfs(i, m - 1, vis, mat, delrow, delcol);
            }
        }

        // Replace unvisited 'O' with 'X'
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (mat[i][j] == 'O' && !vis[i][j]) {
                    mat[i][j] = 'X';
                }
            }
        }
        return mat;
    }

    public static void dfs(int i, int j, boolean vis[][], char[][] mat, int delrow[], int[] delcol) {
        int n = mat.length;
        int m = mat[0].length;
        vis[i][j] = true;

        for (int x = 0; x < 4; x++) {
            int nrow = i + delrow[x];
            int ncol = j + delcol[x];

            // Check bounds first, then conditions
            if (nrow >= 0 && nrow < n && ncol >= 0 && ncol < m &&
                !vis[nrow][ncol] && mat[nrow][ncol] == 'O') {
                dfs(nrow, ncol, vis, mat, delrow, delcol);
            }
        }
    }
}
