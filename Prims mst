class Solution {
    public int spanningTree(int V, int[][] edges) {
       
       ArrayList<ArrayList<Pair>> adj=new ArrayList<>();
       
       for(int i=0;i<V;i++)
       {
           adj.add(new ArrayList<>());
       }
       for(int i=0;i<edges.length;i++)
       {
           int u=edges[i][0];
           int v=edges[i][1];
           int wt=edges[i][2];
           adj.get(u).add(new Pair(v,wt));
           adj.get(v).add(new Pair(u,wt));
       }
       PriorityQueue<Pair> pq=new PriorityQueue<Pair>(( x, y)-> x.first-y.first);
       int vis[]=new int[V];
       int sum=0;
       pq.add(new Pair(0,0));
       
       
       while(!pq.isEmpty())
       {
           Pair curr=pq.remove();
           int wt=curr.first;
           int node=curr.second;
           
           if(vis[node]==1) continue;
           vis[node]=1;
           sum+=wt;
           for(Pair it:adj.get(node))
           {
               int aWt=it.second;
               int aNode=it.first;
               if(vis[aNode]==0)
               {
                   pq.add(new Pair(aWt,aNode));
               }
           }
           
       }
       
       return sum;
        
    }
}
class Pair{
    int first;
    int second;
    Pair(int first,int second)
    {
        this.first=first;
        this.second=second;
    }
}
