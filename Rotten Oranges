class Solution {
    class Pair{
        int r;
        int c;
        int t;
        public Pair(int r,int c,int t)
        {
            this.r=r;
            this.c=c;
            this.t=t;
        }
    }
    public int orangesRotting(int[][] mat) {
        
        int n=mat.length;
        int m=mat[0].length;
        
        Queue<Pair> q=new LinkedList<>();
        int vis[][]=new int[n][m];
        
        int delrow[]={-1,0,1,0};
        int delcol[]={0,1,0,-1};
        int freshOranges=0;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(mat[i][j]==2 )
                {
                q.add(new Pair(i,j,0));
                vis[i][j]=2;
                }
                else{
                    vis[i][j]=0;
                }
                if(mat[i][j]==1)
                {
                    freshOranges++;
                }
            }
        }
        
        //Implementing BFS
        int Totaltime=0;
        int cnt=0;
        while(q.size()>0)
        {
            Pair rem=q.remove();
            int r=rem.r;
            int c=rem.c;
            int t=rem.t;
            Totaltime=Math.max(Totaltime,t);
            for(int i=0;i<4;i++)
            {
                int nrow=r+delrow[i];
                int ncol=c+delcol[i];
                if(nrow>=0 && nrow<n && ncol>=0 && ncol<m 
                && vis[nrow][ncol]==0 && mat[nrow][ncol]==1)
                {
                    vis[nrow][ncol]=2;
                    cnt++;
                    q.add(new Pair(nrow,ncol,t+1));
                    
                }
            }
        }
        if(cnt!=freshOranges)
        {
            return -1;
        }
        return Totaltime;
        
    }
}
