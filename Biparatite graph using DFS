class Solution {
    public boolean isBipartite(int V, int[][] edges) {
     
    ArrayList<ArrayList<Integer>> adj=new ArrayList<>();
    for(int i=0;i<V;i++)
    {
        adj.add(new ArrayList<Integer>());
    }
    int n=edges.length;
    int m=edges[0].length;
  
    for(int i=0;i<n;i++) {
    int u = edges[i][0];
    int v = edges[i][1];
    adj.get(u).add(v);
    adj.get(v).add(u); // undirected graph
}

    int colour[]=new int[V];
    Arrays.fill(colour,-1);
    
    for(int i=0;i<V;i++)
    {
        if(colour[i]==-1)
        {
            if(!dfs(i,colour,0,adj))
            {
                return false;
            }
        }
    }
    return true;
    
    }
   
   public boolean dfs(int i,int[] colour,int col,ArrayList<ArrayList<Integer>> adj)
   {
       colour[i]=col;
       for(int x:adj.get(i))
       {
           if(colour[x]==-1)
           {
           if(!dfs(x,colour,1-col,adj))
           {
               return false;
           }
           }
           else if(colour[x]==colour[i]){
               return false;
           }
       }
       return true;
   }
    
}
