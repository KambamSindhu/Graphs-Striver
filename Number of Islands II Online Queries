// User function Template for Java

class Solution {

    public List<Integer> numOfIslands(int n, int m, int[][] operators) {
       
     DisjointSet d=new DisjointSet(n*m);
     int vis[][]=new int[n][m];
     int cnt=0;
     int delrow[]={-1,0,1,0};
     int delcol[]={0,1,0,-1};
      List<Integer> ans=new ArrayList<>();
     for(int i=0;i<operators.length;i++)
     {
         int r=operators[i][0];
         int c=operators[i][1];
         if(vis[r][c]==1)
         {
             ans.add(cnt);
             continue;
         }
         vis[r][c]=1;
         cnt++;
         for(int x=0;x<4;x++)
         {
             int newR=r+delrow[x];
             int newC=c+delcol[x];
             if(newR>=0 && newR<n && newC>=0 && newC<m &&
             vis[newR][newC]==1)
             {
                int nodeNo=r*m+c;
                int adjNodeNo=newR*m+newC;
            if(d.UltimateParent(nodeNo)!=d.UltimateParent(adjNodeNo))
            {
                cnt--;
                d.UnionOfNode(nodeNo,adjNodeNo);
            }
             }
         }
         ans.add(cnt);
     }
     return ans;
    }
}

class DisjointSet{
    
    int parent[];
    int size[];
    public DisjointSet(int n)
    {
        parent=new int[n];
        size=new int[n];
        for(int i=0;i<n;i++)
        {
            parent[i]=i;
            size[i]=1;
        }
    }
    public int UltimateParent(int node)
    {
        if(node==parent[node])
        {
            return node;
        }
        parent[node]=UltimateParent(parent[node]);
        
        return parent[node];
        
    }
    public void UnionOfNode(int u,int v)
    {
        int upu=UltimateParent(u);
        int upv=UltimateParent(v);
        if(upu==upv)
        {
            return;
        }
        
        if(size[upu]<size[upv])
        {
            parent[upu]=upv;
            size[upv]+=size[upu];
        }
        else{
            parent[upv]=upu;
            size[upu]+=size[upv];
        }
    }
}
