class Solution {
    public int wordLadderLength(String startWord, String targetWord,
                                String[] wordList) {
       Set<String> st=new HashSet<>();
       for(int i=0;i<wordList.length;i++)
       {
           st.add(wordList[i]);
       }
       
       Queue<Pair> q=new ArrayDeque<>();
       q.add(new Pair(startWord,1));
       
       while(!q.isEmpty())
       {
           Pair curr=q.remove();
           int steps=curr.step;
           String word=curr.word;
           if(word.equals(targetWord))
           {
               return steps;
           }
           
           for(int i=0;i<word.length();i++)
           {
               for(char ch='a';ch<='z';ch++)
               {
                   
               char[] replaceCharArray=word.toCharArray();
               replaceCharArray[i]=ch;
               String replacedWord=new String(replaceCharArray);
               if(st.contains(replacedWord))
               {
                   st.remove(replacedWord);
                   q.add(new Pair(replacedWord,steps+1));
               }
               }
           }
           
       }
       return 0;
    }
}
class Pair{
    String word;
    int step;
    
    Pair(String word,int step)
    {
        this.word=word;
        this.step=step;
    }
}
