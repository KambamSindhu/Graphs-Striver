import java.util.*;

class Solution {
    public static ArrayList<Integer> topoSort(int V, int[][] edges) {
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        ArrayList<Integer> ans = new ArrayList<>();
        
        // initialize adjacency list
        for (int i = 0; i < V; i++) {
            adj.add(new ArrayList<>());
        }
        
        // build graph (directed)
        for (int i = 0; i < edges.length; i++) {
            adj.get(edges[i][0]).add(edges[i][1]);
        }
        
        boolean[] vis = new boolean[V];
        Stack<Integer> st = new Stack<>();
        
        // run dfs on all nodes
        for (int i = 0; i < V; i++) {
            if (!vis[i]) {
                dfs(i, vis, st, adj);
            }
        }
        
        // get topo order
        while (!st.isEmpty()) {
            ans.add(st.pop());
        }
        
        return ans;
    }
    
    private static void dfs(int src, boolean[] vis, Stack<Integer> st, ArrayList<ArrayList<Integer>> adj) {
        vis[src] = true;
        for (int it : adj.get(src)) {
            if (!vis[it]) {
                dfs(it, vis, st, adj);
            }
        }
        st.push(src); // add after visiting children
    }

    // driver to test
    public static void main(String[] args) {
        int V = 6;
        int[][] edges = {
            {5, 2}, {5, 0}, {4, 0}, {4, 1}, {2, 3}, {3, 1}
        };
        
        ArrayList<Integer> topo = topoSort(V, edges);
        System.out.println("Topological Sort: " + topo);
    }
}
