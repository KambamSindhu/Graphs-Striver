class Solution {

    public int Solve(int n, int[][] edge) {
        DisjointSet d=new DisjointSet(n);
        int connectedcomponets=0;
        int extraedges=0;
        for(int i=0;i<edge.length;i++)
        {
            int u=edge[i][0];
            int v=edge[i][1];
           if(d.UltimateParent(u)==d.UltimateParent(v))
            {
               extraedges++; 
            }
            else {
                d.UnionNodes(u,v);
            }
        }
        
        for(int i=0;i<n;i++)
        {
            if(d.parent[i]==i)
            {
                connectedcomponets++;
            }
        }
     int neededEdges = connectedcomponets - 1;
        if (extraedges < neededEdges) {
            return -1; // not enough extra edges to connect all
        }
        return neededEdges;
    }
}
class DisjointSet{
    int parent[];
    int size[];
    public DisjointSet(int n)
    {
        parent=new int[n];
        size=new int[n];
        for(int i=0;i<n;i++)
        {
            parent[i]=i;
            size[i]=1;
        }
    }
    public int UltimateParent(int node)
    {
        if(node==parent[node])
        {
            return node;
        }
        
        parent[node]=UltimateParent(parent[node]);
        return parent[node];
    }
    
    public void UnionNodes(int u,int v)
    {
        int upu=UltimateParent(u);
        int upv=UltimateParent(v);
        if(upu==upv) return;
        if(size[upu] <size[upv])
        {
            parent[upu]=upv;
            size[upv]+=size[upu];
        } 
        else
        {
            parent[upv]=upu;
            size[upu]+=size[upv];
        }
    }
}
