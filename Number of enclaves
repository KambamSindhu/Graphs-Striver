class Solution {

    static class Pair {
        int r, c;
        Pair(int r, int c) {
            this.r = r;
            this.c = c;
        }
    }

    public int numberOfEnclaves(int[][] grid) {
        int n = grid.length;
        int m = grid[0].length;

        boolean[][] vis = new boolean[n][m];
        Queue<Pair> q = new LinkedList<>();

        // Add boundary cells
        for (int j = 0; j < m; j++) {
            if (grid[0][j] == 1 && !vis[0][j]) {
                q.add(new Pair(0, j));
                vis[0][j] = true;
            }
            if (grid[n - 1][j] == 1 && !vis[n - 1][j]) {
                q.add(new Pair(n - 1, j));
                vis[n - 1][j] = true;
            }
        }
        for (int i = 0; i < n; i++) {
            if (grid[i][0] == 1 && !vis[i][0]) {
                q.add(new Pair(i, 0));
                vis[i][0] = true;
            }
            if (grid[i][m - 1] == 1 && !vis[i][m - 1]) {
                q.add(new Pair(i, m - 1));
                vis[i][m - 1] = true;
            }
        }

        // BFS
        int[] delRow = {-1, 0, 1, 0};
        int[] delCol = {0, 1, 0, -1};

        while (!q.isEmpty()) {
            Pair rem = q.poll();
            for (int k = 0; k < 4; k++) {
                int nr = rem.r + delRow[k];
                int nc = rem.c + delCol[k];
                if (nr >= 0 && nr < n && nc >= 0 && nc < m &&
                        grid[nr][nc] == 1 && !vis[nr][nc]) {
                    q.add(new Pair(nr, nc));
                    vis[nr][nc] = true;
                }
            }
        }

        // Count enclaves
        int cnt = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid[i][j] == 1 && !vis[i][j]) {
                    cnt++;
                }
            }
        }

        return cnt;
    }
}
